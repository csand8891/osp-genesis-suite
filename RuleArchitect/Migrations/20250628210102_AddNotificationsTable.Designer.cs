// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RuleArchitect.Data;

namespace RuleArchitect.Migrations
{
    [DbContext(typeof(RuleArchitectContext))]
    [Migration("20250628210102_AddNotificationsTable")]
    partial class AddNotificationsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("GenesisSentry.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            IsActive = true,
                            PasswordHash = "gHarxnybaF14pg0khiMv27IsdXuj2dmx0ytALdo5+aE=",
                            PasswordSalt = "f9DAu0b2jcGAhuVKmgFYNw==",
                            Role = "Administrator",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("RuleArchitect.Entities.ControlSystem", b =>
                {
                    b.Property<int>("ControlSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("ControlSystemId");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_ControlSystemName");

                    b.ToTable("ControlSystems");

                    b.HasData(
                        new
                        {
                            ControlSystemId = 1,
                            MachineTypeId = 1,
                            Name = "P300L"
                        },
                        new
                        {
                            ControlSystemId = 2,
                            MachineTypeId = 1,
                            Name = "P300S"
                        },
                        new
                        {
                            ControlSystemId = 3,
                            MachineTypeId = 2,
                            Name = "P300M"
                        },
                        new
                        {
                            ControlSystemId = 4,
                            MachineTypeId = 2,
                            Name = "E100M"
                        },
                        new
                        {
                            ControlSystemId = 5,
                            MachineTypeId = 1,
                            Name = "P200L"
                        },
                        new
                        {
                            ControlSystemId = 6,
                            MachineTypeId = 2,
                            Name = "P200M"
                        });
                });

            modelBuilder.Entity("RuleArchitect.Entities.MachineModel", b =>
                {
                    b.Property<int>("MachineModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("MachineModelId");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_MachineModelName");

                    b.ToTable("MachineModels");
                });

            modelBuilder.Entity("RuleArchitect.Entities.MachineType", b =>
                {
                    b.Property<int>("MachineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("MachineTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_MachineTypeName");

                    b.ToTable("MachineTypes");

                    b.HasData(
                        new
                        {
                            MachineTypeId = 1,
                            Name = "Lathe"
                        },
                        new
                        {
                            MachineTypeId = 2,
                            Name = "Machining Center"
                        },
                        new
                        {
                            MachineTypeId = 3,
                            Name = "Grinder"
                        });
                });

            modelBuilder.Entity("RuleArchitect.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RuleArchitect.Entities.OptionNumberRegistry", b =>
                {
                    b.Property<int>("OptionNumberRegistryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OptionNumberRegistryId");

                    b.HasIndex("SoftwareOptionId");

                    b.ToTable("OptionNumberRegistries");
                });

            modelBuilder.Entity("RuleArchitect.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("OrderReviewNotes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OrderReviewedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderReviewerUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ProductionCompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductionNotes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductionTechUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SoftwareReviewNotes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SoftwareReviewedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SoftwareReviewerUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderId");

                    b.HasIndex("ControlSystemId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("MachineModelId");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasName("IX_OrderNumber");

                    b.HasIndex("OrderReviewerUserId");

                    b.HasIndex("ProductionTechUserId");

                    b.HasIndex("SoftwareReviewerUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RuleArchitect.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderItemId");

                    b.HasIndex("SoftwareOptionId");

                    b.HasIndex("OrderId", "SoftwareOptionId")
                        .IsUnique()
                        .HasName("IX_Order_SoftwareOption");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("RuleArchitect.Entities.ParameterMapping", b =>
                {
                    b.Property<int>("ParameterMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionIdentifier")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("ConditionName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("ConfigurationDetailsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedSheetName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("SettingContext")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int?>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParameterMappingId");

                    b.HasIndex("SoftwareOptionId");

                    b.ToTable("ParameterMappings");
                });

            modelBuilder.Entity("RuleArchitect.Entities.Requirement", b =>
                {
                    b.Property<int>("RequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Condition")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("GeneralRequiredValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("OspFileName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("OspFileVersion")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int?>("RequiredSoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequiredSpecCodeDefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequirementType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequirementId");

                    b.HasIndex("RequiredSoftwareOptionId");

                    b.HasIndex("RequiredSpecCodeDefinitionId");

                    b.HasIndex("SoftwareOptionId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOption", b =>
                {
                    b.Property<int>("SoftwareOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternativeNames")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("CheckedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CheckedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ControlSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("PrimaryOptionNumberDisplay")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("SourceFileName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("SoftwareOptionId");

                    b.HasIndex("ControlSystemId");

                    b.ToTable("SoftwareOptions");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionActivationRule", b =>
                {
                    b.Property<int>("SoftwareOptionActivationRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivationSetting")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SoftwareOptionActivationRuleId");

                    b.HasIndex("SoftwareOptionId");

                    b.ToTable("SoftwareOptionActivationRules");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionHistory", b =>
                {
                    b.Property<int>("SoftwareOptionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternativeNames")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<DateTime>("ChangeTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("CheckedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CheckedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ControlSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("PrimaryOptionNumberDisplay")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceFileName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("SoftwareOptionHistoryId");

                    b.HasIndex("SoftwareOptionId", "Version")
                        .HasName("IX_SoftwareOptionHistory_SoftwareOptionId_Version");

                    b.ToTable("SoftwareOptionHistories");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionSpecificationCode", b =>
                {
                    b.Property<int>("SoftwareOptionSpecificationCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoftwareOptionActivationRuleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecCodeDefinitionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SoftwareOptionSpecificationCodeId");

                    b.HasIndex("SoftwareOptionActivationRuleId");

                    b.HasIndex("SoftwareOptionId");

                    b.HasIndex("SpecCodeDefinitionId");

                    b.ToTable("SoftwareOptionSpecificationCodes");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SpecCodeDefinition", b =>
                {
                    b.Property<int>("SpecCodeDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("ControlSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("SpecCodeBit")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("SpecCodeNo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("SpecCodeDefinitionId");

                    b.HasIndex("ControlSystemId");

                    b.HasIndex("SpecCodeNo", "SpecCodeBit", "ControlSystemId", "Category")
                        .IsUnique()
                        .HasName("IX_SpecCodeNoBitControlSystemCategory");

                    b.ToTable("SpecCodeDefinitions");
                });

            modelBuilder.Entity("RuleArchitect.Entities.UserActivityLog", b =>
                {
                    b.Property<long>("UserActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(45);

                    b.Property<string>("TargetEntityDescription")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int?>("TargetEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TargetEntityType")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("UserActivityLogId");

                    b.HasIndex("ActivityType")
                        .HasName("IX_UserActivityLog_ActivityType");

                    b.HasIndex("Timestamp")
                        .HasName("IX_UserActivityLog_Timestamp");

                    b.HasIndex("UserId")
                        .HasName("IX_UserActivityLog_UserId");

                    b.HasIndex("TargetEntityType", "TargetEntityId")
                        .HasName("IX_UserActivityLog_TargetEntityType_TargetEntity");

                    b.HasIndex("UserId", "Timestamp")
                        .HasName("IX_UserActivityLog_User_Timestamp");

                    b.ToTable("UserActivityLog");
                });

            modelBuilder.Entity("RuleArchitect.Entities.ControlSystem", b =>
                {
                    b.HasOne("RuleArchitect.Entities.MachineType", "MachineType")
                        .WithMany("ControlSystems")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.MachineModel", b =>
                {
                    b.HasOne("RuleArchitect.Entities.MachineType", "MachineType")
                        .WithMany("MachineModels")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.Notification", b =>
                {
                    b.HasOne("GenesisSentry.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RuleArchitect.Entities.OptionNumberRegistry", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("OptionNumberRegistries")
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.Order", b =>
                {
                    b.HasOne("RuleArchitect.Entities.ControlSystem", "ControlSystem")
                        .WithMany()
                        .HasForeignKey("ControlSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GenesisSentry.Entities.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GenesisSentry.Entities.UserEntity", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId");

                    b.HasOne("RuleArchitect.Entities.MachineModel", "MachineModel")
                        .WithMany()
                        .HasForeignKey("MachineModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GenesisSentry.Entities.UserEntity", "OrderReviewerUser")
                        .WithMany()
                        .HasForeignKey("OrderReviewerUserId");

                    b.HasOne("GenesisSentry.Entities.UserEntity", "ProductionTechUser")
                        .WithMany()
                        .HasForeignKey("ProductionTechUserId");

                    b.HasOne("GenesisSentry.Entities.UserEntity", "SoftwareReviewerUser")
                        .WithMany()
                        .HasForeignKey("SoftwareReviewerUserId");
                });

            modelBuilder.Entity("RuleArchitect.Entities.OrderItem", b =>
                {
                    b.HasOne("RuleArchitect.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany()
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.ParameterMapping", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("ParameterMappings")
                        .HasForeignKey("SoftwareOptionId");
                });

            modelBuilder.Entity("RuleArchitect.Entities.Requirement", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "RequiredSoftwareOption")
                        .WithMany("RequiredByOptions")
                        .HasForeignKey("RequiredSoftwareOptionId");

                    b.HasOne("RuleArchitect.Entities.SpecCodeDefinition", "RequiredSpecCodeDefinition")
                        .WithMany("Requirements")
                        .HasForeignKey("RequiredSpecCodeDefinitionId");

                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("Requirements")
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOption", b =>
                {
                    b.HasOne("RuleArchitect.Entities.ControlSystem", "ControlSystem")
                        .WithMany("SoftwareOptions")
                        .HasForeignKey("ControlSystemId");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionActivationRule", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("SoftwareOptionActivationRules")
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionHistory", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("Histories")
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionSpecificationCode", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOptionActivationRule", "SoftwareOptionActivationRule")
                        .WithMany("SoftwareOptionSpecificationCodes")
                        .HasForeignKey("SoftwareOptionActivationRuleId");

                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("SoftwareOptionSpecificationCodes")
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RuleArchitect.Entities.SpecCodeDefinition", "SpecCodeDefinition")
                        .WithMany("SoftwareOptionSpecificationCodes")
                        .HasForeignKey("SpecCodeDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.SpecCodeDefinition", b =>
                {
                    b.HasOne("RuleArchitect.Entities.ControlSystem", "ControlSystem")
                        .WithMany("SpecCodeDefinitions")
                        .HasForeignKey("ControlSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.UserActivityLog", b =>
                {
                    b.HasOne("GenesisSentry.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
