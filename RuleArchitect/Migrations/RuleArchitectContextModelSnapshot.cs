// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RuleArchitect.Data;

namespace RuleArchitect.Migrations
{
    [DbContext(typeof(RuleArchitectContext))]
    partial class RuleArchitectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("RuleArchitect.Entities.ControlSystem", b =>
                {
                    b.Property<int>("ControlSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("ControlSystemId");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_ControlSystemName");

                    b.ToTable("ControlSystems");
                });

            modelBuilder.Entity("RuleArchitect.Entities.MachineType", b =>
                {
                    b.Property<int>("MachineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("MachineTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_MachineTypeName");

                    b.ToTable("MachineTypes");
                });

            modelBuilder.Entity("RuleArchitect.Entities.OptionNumberRegistry", b =>
                {
                    b.Property<int>("OptionNumberRegistryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OptionNumberRegistryId");

                    b.HasIndex("SoftwareOptionId");

                    b.ToTable("OptionNumberRegistries");
                });

            modelBuilder.Entity("RuleArchitect.Entities.ParameterMapping", b =>
                {
                    b.Property<int>("ParameterMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConditionIdentifier")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("ConditionName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("ConfigurationDetailsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedSheetName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("SettingContext")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int?>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParameterMappingId");

                    b.HasIndex("SoftwareOptionId");

                    b.ToTable("ParameterMappings");
                });

            modelBuilder.Entity("RuleArchitect.Entities.Requirement", b =>
                {
                    b.Property<int>("RequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Condition")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("GeneralRequiredValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("OspFileName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("OspFileVersion")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int?>("RequiredSoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequiredSpecCodeDefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequirementType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequirementId");

                    b.HasIndex("RequiredSoftwareOptionId");

                    b.HasIndex("RequiredSpecCodeDefinitionId");

                    b.HasIndex("SoftwareOptionId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOption", b =>
                {
                    b.Property<int>("SoftwareOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternativeNames")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("CheckedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CheckedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ControlSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("PrimaryOptionNumberDisplay")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("SourceFileName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("SoftwareOptionId");

                    b.HasIndex("ControlSystemId");

                    b.ToTable("SoftwareOptions");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionActivationRule", b =>
                {
                    b.Property<int>("SoftwareOptionActivationRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivationSetting")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SoftwareOptionActivationRuleId");

                    b.HasIndex("SoftwareOptionId");

                    b.ToTable("SoftwareOptionActivationRules");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionHistory", b =>
                {
                    b.Property<int>("SoftwareOptionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternativeNames")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<DateTime>("ChangeTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("CheckedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CheckedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ControlSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("PrimaryOptionNumberDisplay")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceFileName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("SoftwareOptionHistoryId");

                    b.HasIndex("SoftwareOptionId", "Version")
                        .HasName("IX_SoftwareOptionHistory_SoftwareOptionId_Version");

                    b.ToTable("SoftwareOptionHistories");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionSpecificationCode", b =>
                {
                    b.Property<int>("SoftwareOptionSpecificationCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoftwareOptionActivationRuleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SoftwareOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecCodeDefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecificInterpretation")
                        .HasColumnType("TEXT");

                    b.HasKey("SoftwareOptionSpecificationCodeId");

                    b.HasIndex("SoftwareOptionActivationRuleId");

                    b.HasIndex("SoftwareOptionId");

                    b.HasIndex("SpecCodeDefinitionId");

                    b.ToTable("SoftwareOptionSpecificationCodes");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SpecCodeDefinition", b =>
                {
                    b.Property<int>("SpecCodeDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<int>("MachineTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecCodeBit")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("SpecCodeNo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("SpecCodeDefinitionId");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("SpecCodeNo", "SpecCodeBit", "MachineTypeId")
                        .IsUnique()
                        .HasName("IX_SpecCodeNoBitMachineType");

                    b.ToTable("SpecCodeDefinitions");
                });

            modelBuilder.Entity("RuleArchitect.Entities.ControlSystem", b =>
                {
                    b.HasOne("RuleArchitect.Entities.MachineType", "MachineType")
                        .WithMany("ControlSystems")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.OptionNumberRegistry", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("OptionNumberRegistries")
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.ParameterMapping", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("ParameterMappings")
                        .HasForeignKey("SoftwareOptionId");
                });

            modelBuilder.Entity("RuleArchitect.Entities.Requirement", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "RequiredSoftwareOption")
                        .WithMany("RequiredByOptions")
                        .HasForeignKey("RequiredSoftwareOptionId");

                    b.HasOne("RuleArchitect.Entities.SpecCodeDefinition", "RequiredSpecCodeDefinition")
                        .WithMany("Requirements")
                        .HasForeignKey("RequiredSpecCodeDefinitionId");

                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("Requirements")
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOption", b =>
                {
                    b.HasOne("RuleArchitect.Entities.ControlSystem", "ControlSystem")
                        .WithMany("SoftwareOptions")
                        .HasForeignKey("ControlSystemId");
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionActivationRule", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("SoftwareOptionActivationRules")
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionHistory", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("Histories")
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.SoftwareOptionSpecificationCode", b =>
                {
                    b.HasOne("RuleArchitect.Entities.SoftwareOptionActivationRule", "SoftwareOptionActivationRule")
                        .WithMany("SoftwareOptionSpecificationCodes")
                        .HasForeignKey("SoftwareOptionActivationRuleId");

                    b.HasOne("RuleArchitect.Entities.SoftwareOption", "SoftwareOption")
                        .WithMany("SoftwareOptionSpecificationCodes")
                        .HasForeignKey("SoftwareOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RuleArchitect.Entities.SpecCodeDefinition", "SpecCodeDefinition")
                        .WithMany("SoftwareOptionSpecificationCodes")
                        .HasForeignKey("SpecCodeDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RuleArchitect.Entities.SpecCodeDefinition", b =>
                {
                    b.HasOne("RuleArchitect.Entities.MachineType", "MachineType")
                        .WithMany("SpecCodeDefinitions")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
