<UserControl x:Class="RuleArchitect.DesktopClient.Views.EditSoftwareOptionView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:RuleArchitect.DesktopClient.Views"
             xmlns:viewModels="clr-namespace:RuleArchitect.DesktopClient.ViewModels"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:converters="clr-namespace:RuleArchitect.DesktopClient.Converters"
             FontFamily="{materialDesign:MaterialDesignFont}"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=viewModels:EditSoftwareOptionViewModel, IsDesignTimeCreatable=False}"
             d:DesignHeight="600" d:DesignWidth="800"
             Background="{DynamicResource MaterialDesignPaper}">

    <UserControl.Resources>
        <converters:RequirementTypeToVisibilityConverter x:Key="RequirementTypeToVisibilityConverter" />
        
        <!-- Add this DataTemplate -->
        <DataTemplate x:Key="TabHeaderTemplate">
            <TextBlock Text="{Binding}"
                      Foreground="{DynamicResource MaterialDesignBody}"
                      FontSize="14"/>
        </DataTemplate>

        <!-- Add these brushes -->
        <SolidColorBrush x:Key="MaterialDesignBody" Color="#DD000000"/>
        <SolidColorBrush x:Key="MaterialDesignTabHeaderSelectedBrush" Color="#005EB8"/>
        <SolidColorBrush x:Key="MaterialDesignTabHeaderUnselectedBrush" Color="#89000000"/>

        <!-- Define the TabItem style -->
        <Style x:Key="CustomTabItemStyle" TargetType="TabItem" BasedOn="{StaticResource MaterialDesignTabItem}">
        </Style>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- DialogHost and content below header -->
        <materialDesign:DialogHost Grid.Row="1"
                                  Identifier="EditSoftwareOptionDialogHost"
                                  CloseOnClickAway="True"
                                  Margin="0,8,0,0">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Header: Always visible, not overlapped -->
                <TextBlock Grid.Row="0"
                           Text="{Binding ViewTitle}" 
                           Foreground="#FF000000"  
                           FontSize="24"
                           FontWeight="Bold"
                           Margin="16,16,16,0"
                           VerticalAlignment="Top"/>

                <!-- Content Tabs -->
                <TabControl Grid.Row="1" Margin="8" 
                            Style="{DynamicResource MaterialDesignTabControl}">
                    <!-- Details Tab -->
                    <TabItem Style="{StaticResource CustomTabItemStyle}" Header="Details">
                        <ScrollViewer VerticalScrollBarVisibility="Auto" Padding="16">
                            <StackPanel>
                                <TextBox materialDesign:HintAssist.Hint="Primary Name" Text="{Binding PrimaryName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource MaterialDesignFloatingHintTextBox}" Margin="0,5"/>
                                <TextBox materialDesign:HintAssist.Hint="Alternative Names" Text="{Binding AlternativeNames, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource MaterialDesignFloatingHintTextBox}" Margin="0,5"/>
                                <TextBox materialDesign:HintAssist.Hint="Source File Name" Text="{Binding SourceFileName, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource MaterialDesignFloatingHintTextBox}" Margin="0,5"/>
                                <ComboBox materialDesign:HintAssist.Hint="Control System" ItemsSource="{Binding AvailableControlSystems}" DisplayMemberPath="Name" SelectedValuePath="ControlSystemId" SelectedValue="{Binding ControlSystemId}" Style="{StaticResource MaterialDesignFloatingHintComboBox}" Margin="0,5"/>
                                <TextBox materialDesign:HintAssist.Hint="Notes" Text="{Binding Notes, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource MaterialDesignFloatingHintTextBox}" TextWrapping="Wrap" MinLines="3" Margin="0,5"/>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>

                    <!-- Option # Tab -->
                    <TabItem Style="{StaticResource CustomTabItemStyle}" Header="Option #">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ListView Grid.Row="0" ItemsSource="{Binding OptionNumbers}" Margin="8">
                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBox Grid.Column="0" Text="{Binding OptionNumber, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" BorderThickness="0,0,0,1"/>
                                            <Button Grid.Column="1" 
                                                    Command="{Binding DataContext.RemoveOptionNumberCommand, RelativeSource={RelativeSource AncestorType={x:Type local:EditSoftwareOptionView}}}" 
                                                    CommandParameter="{Binding}" 
                                                    Style="{StaticResource MaterialDesignToolButton}" 
                                                    ToolTip="Remove Option Number">
                                                <materialDesign:PackIcon Kind="Delete"/>
                                            </Button>
                                        </Grid>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                            <Button Grid.Row="1" Content="Add Option #" Command="{Binding AddOptionNumberCommand}" Style="{StaticResource MaterialDesignFlatButton}" HorizontalAlignment="Right" Margin="8"/>
                        </Grid>
                    </TabItem>

                    <!-- Spec Codes Tab -->
                    <TabItem Style="{StaticResource CustomTabItemStyle}" Header="Spec Codes">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <DataGrid Grid.Row="0" ItemsSource="{Binding SpecificationCodes}" 
                                      SelectedItem="{Binding SelectedSpecificationCode, Mode=TwoWay}"
                                      AutoGenerateColumns="False" CanUserAddRows="False" IsReadOnly="True" Margin="8">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Category" Binding="{Binding Category}" Width="*"/>
                                    <DataGridTextColumn Header="Spec No" Binding="{Binding SpecCodeNo}" Width="*"/>
                                    <DataGridTextColumn Header="Spec Bit" Binding="{Binding SpecCodeBit}" Width="*"/>
                                    <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="3*"/>
                                    <DataGridTextColumn Header="Activation Rule" Binding="{Binding ActivationRuleName}" Width="2*"/>
                                    <DataGridTextColumn Header="Interpretation" Binding="{Binding SpecificInterpretation}" Width="2*"/>
                                    <DataGridTemplateColumn>
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button Style="{StaticResource MaterialDesignToolButton}" 
                                                        Command="{Binding DataContext.EditSpecificationCodeCommand, RelativeSource={RelativeSource AncestorType={x:Type local:EditSoftwareOptionView}}}"
                                                        CommandParameter="{Binding}"
                                                        ToolTip="Edit Specification Code">
                                                    <materialDesign:PackIcon Kind="Pencil" />
                                                </Button>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>

                            <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="8">
                                <Button Content="Remove Selected" 
                                        Command="{Binding RemoveSpecificationCodeCommand}" 
                                        Style="{StaticResource MaterialDesignOutlinedButton}"
                                        ToolTip="Removes the currently selected specification code from the list."
                                        Margin="0,0,8,0" />

                                <Button Content="Add Specification Code" 
                                        Command="{Binding AddSpecificationCodeCommand}" 
                                        Style="{StaticResource MaterialDesignFlatButton}"/>
                            </StackPanel>
                        </Grid>
                    </TabItem>

                    <!-- Requirements Tab -->
                    <TabItem Style="{StaticResource CustomTabItemStyle}" Header="Requirements">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <DataGrid Grid.Row="0" ItemsSource="{Binding Requirements}" AutoGenerateColumns="False" CanUserAddRows="False" Margin="8" SelectedItem="{Binding SelectedRequirement, Mode=TwoWay}">
                                <DataGrid.Columns>
                                    <!-- Requirement Type Selector -->
                                    <DataGridTemplateColumn Header="Type" Width="*">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <ComboBox ItemsSource="{Binding Source={x:Static viewModels:RequirementViewModel.AvailableRequirementTypes}}" 
                                                          SelectedValue="{Binding RequirementType, UpdateSourceTrigger=PropertyChanged}"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>

                                    <!-- Condition Selector -->
                                    <DataGridTemplateColumn Header="Condition" Width="*">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <ComboBox ItemsSource="{Binding Source={x:Static viewModels:RequirementViewModel.AvailableConditions}}" 
                                                          SelectedValue="{Binding Condition, UpdateSourceTrigger=PropertyChanged}"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>

                                    <!-- Value (Dynamic content based on Type) -->
                                    <DataGridTemplateColumn Header="Value" Width="2*">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid>
                                                    <!-- Text Box for General Text -->
                                                    <TextBox Text="{Binding GeneralRequiredValue, UpdateSourceTrigger=PropertyChanged}"
                                                             Visibility="{Binding RequirementType, Converter={StaticResource RequirementTypeToVisibilityConverter}, ConverterParameter='General Text'}"/>

                                                    <!-- ComboBox for Software Options -->
                                                    <ComboBox ItemsSource="{Binding DataContext.AvailableSoftwareOptionsForRequirements, RelativeSource={RelativeSource AncestorType={x:Type local:EditSoftwareOptionView}}}"
                                                              DisplayMemberPath="PrimaryName"
                                                              SelectedValuePath="SoftwareOptionId"
                                                              SelectedValue="{Binding RequiredSoftwareOptionId}"
                                                              Visibility="{Binding RequirementType, Converter={StaticResource RequirementTypeToVisibilityConverter}, ConverterParameter='Software Option'}"/>

                                                    <!-- ComboBox for Spec Codes -->
                                                    <ComboBox ItemsSource="{Binding DataContext.AvailableSpecCodesForRequirements, RelativeSource={RelativeSource AncestorType={x:Type local:EditSoftwareOptionView}}}"
                                                              DisplayMemberPath="DisplayName"
                                                              SelectedValuePath="SpecCodeDefinitionId"
                                                              SelectedValue="{Binding RequiredSpecCodeDefinitionId}"
                                                              Visibility="{Binding RequirementType, Converter={StaticResource RequirementTypeToVisibilityConverter}, ConverterParameter='Spec Code'}"/>

                                                    <!-- You can add more controls here for other RequirementTypes -->
                                                </Grid>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                            <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="8">
                                <Button Content="Remove Selected" Command="{Binding RemoveRequirementCommand}" Style="{StaticResource MaterialDesignOutlinedButton}" Margin="0,0,8,0"/>
                                <Button Content="Add Requirement" Command="{Binding AddRequirementCommand}" Style="{StaticResource MaterialDesignFlatButton}"/>
                            </StackPanel>
                        </Grid>
                    </TabItem>

                    <!-- Activation Rules Tab -->
                    <TabItem Style="{StaticResource CustomTabItemStyle}" Header="Activation Rules">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <DataGrid Grid.Row="0" ItemsSource="{Binding ActivationRules}"
                                      SelectedItem="{Binding SelectedActivationRule, Mode=TwoWay}"
                                      AutoGenerateColumns="False" CanUserAddRows="False" Margin="8">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Rule Name" Binding="{Binding RuleName, UpdateSourceTrigger=PropertyChanged}" Width="*"/>
                                    <DataGridTextColumn Header="Activation Setting" Binding="{Binding ActivationSetting, UpdateSourceTrigger=PropertyChanged}" Width="2*"/>
                                    <DataGridTextColumn Header="Notes" Binding="{Binding Notes, UpdateSourceTrigger=PropertyChanged}" Width="3*"/>
                                </DataGrid.Columns>
                            </DataGrid>
                            <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="8">
                                <Button Content="Remove Selected" Command="{Binding RemoveActivationRuleCommand}" Style="{StaticResource MaterialDesignOutlinedButton}" Margin="0,0,8,0"/>
                                <Button Content="Add Rule" Command="{Binding AddActivationRuleCommand}" Style="{StaticResource MaterialDesignFlatButton}"/>
                            </StackPanel>
                        </Grid>
                    </TabItem>

                </TabControl>
            </Grid>
        </materialDesign:DialogHost>
    </Grid>
</UserControl>
